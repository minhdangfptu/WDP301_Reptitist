const nodemailer = require('nodemailer');

// C·∫•u h√¨nh transporter cho Gmail
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD
  },
  tls: {
    rejectUnauthorized: false
  }
});

const sendProductReportNotification = async (shopEmail, shopName, productName, reportReason, adminNote) => {
  try {
    const mailOptions = {
      from: process.env.EMAIL_USER || 'reptitist.service@gmail.com',
      to: shopEmail,
      subject: '[REPTITIST] Th√¥ng b√°o v·ªÅ b√°o c√°o s·∫£n ph·∫©m',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <div style="text-align: center; margin-bottom: 30px;">
              <h1 style="color: #e74c3c; margin: 0; font-size: 24px;">‚ö†Ô∏è TH√îNG B√ÅO V·ªÄ B√ÅO C√ÅO S·∫¢N PH·∫®M</h1>
            </div>
            
            <div style="margin-bottom: 25px;">
              <p style="color: #333; font-size: 16px; line-height: 1.6;">
                Xin ch√†o <strong>${shopName}</strong>,
              </p>
              <p style="color: #333; font-size: 16px; line-height: 1.6;">
                Ch√∫ng t√¥i xin th√¥ng b√°o r·∫±ng s·∫£n ph·∫©m <strong>"${productName}"</strong> c·ªßa b·∫°n ƒë√£ b·ªã b√°o c√°o v√† ƒë∆∞·ª£c admin ch·∫•p nh·∫≠n.
              </p>
            </div>
            
            <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 20px; margin-bottom: 25px;">
              <h3 style="color: #856404; margin-top: 0; font-size: 18px;">üìã Chi ti·∫øt b√°o c√°o:</h3>
              <ul style="color: #856404; font-size: 14px; line-height: 1.6;">
                <li><strong>S·∫£n ph·∫©m:</strong> ${productName}</li>
                <li><strong>L√Ω do b√°o c√°o:</strong> ${reportReason}</li>
                <li><h2>Ghi ch√∫ c·ªßa admin:</h2> ${adminNote || 'Kh√¥ng c√≥ ghi ch√∫'}</li>
                <li><strong>Th·ªùi gian x·ª≠ l√Ω:</strong> ${new Date().toLocaleString('vi-VN')}</li>
              </ul>
            </div>
            
            <div style="background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 20px; margin-bottom: 25px;">
              <h3 style="color: #155724; margin-top: 0; font-size: 18px;">üîß H√†nh ƒë·ªông ƒë√£ th·ª±c hi·ªán:</h3>
              <p style="color: #155724; font-size: 14px; line-height: 1.6; margin: 0;">
                S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang tr·∫°ng th√°i "Kh√¥ng kh·∫£ d·ª•ng" v√† ·∫©n kh·ªèi c·ª≠a h√†ng.
              </p>
            </div>
            
            <div style="background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; margin-bottom: 25px;">
              <h3 style="color: #495057; margin-top: 0; font-size: 18px;">üí° H∆∞·ªõng d·∫´n ti·∫øp theo:</h3>
              <ul style="color: #495057; font-size: 14px; line-height: 1.6;">
                <li>Ki·ªÉm tra l·∫°i s·∫£n ph·∫©m v√† ƒë·∫£m b·∫£o tu√¢n th·ªß quy ƒë·ªãnh c·ªßa Reptitist</li>
                <li>N·∫øu c·∫ßn thi·∫øt, ch·ªânh s·ª≠a th√¥ng tin s·∫£n ph·∫©m v√† li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c xem x√©t l·∫°i</li>
                <li>ƒê·ªÉ tr√°nh vi ph·∫°m trong t∆∞∆°ng lai, vui l√≤ng ƒë·ªçc k·ªπ <a href="#" style="color: #007bff;">Quy ƒë·ªãnh c·ªông ƒë·ªìng</a></li>
              </ul>
            </div>
            
            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
              <p style="color: #666; font-size: 12px; margin: 0;">
                Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng Reptitist.<br>
                N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá: <a href="mailto:support@reptitist.com" style="color: #007bff;">support@reptitist.com</a>
              </p>
            </div>
          </div>
        </div>
      `
    };

    const result = await transporter.sendMail(mailOptions);
    console.log('Email sent successfully:', result.messageId);
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('Error sending email:', error);
    return { success: false, error: error.message };
  }
};

// H√†m g·ª≠i email th√¥ng b√°o khi admin g·ª° b·ªè ·∫©n s·∫£n ph·∫©m
const sendProductUnhideNotification = async (shopEmail, shopName, productName, adminName) => {
  try {
    const mailOptions = {
      from: process.env.EMAIL_USER || 'reptitist.service@gmail.com',
      to: shopEmail,
      subject: '[REPTITIST] Th√¥ng b√°o s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c g·ª° b·ªè ·∫©n',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
          <div style="background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <div style="text-align: center; margin-bottom: 30px;">
              <h1 style="color: #27ae60; margin: 0; font-size: 24px;">‚úÖ S·∫¢N PH·∫®M ƒê√É ƒê∆Ø·ª¢C G·ª† B·ªé ·∫®N</h1>
            </div>
            
            <div style="margin-bottom: 25px;">
              <p style="color: #333; font-size: 16px; line-height: 1.6;">
                Xin ch√†o <strong>${shopName}</strong>,
              </p>
              <p style="color: #333; font-size: 16px; line-height: 1.6;">
                Ch√∫ng t√¥i xin th√¥ng b√°o r·∫±ng s·∫£n ph·∫©m <strong>"${productName}"</strong> c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c admin g·ª° b·ªè ·∫©n v√† c√≥ th·ªÉ b√°n l·∫°i.
              </p>
            </div>
            
            <div style="background-color: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 20px; margin-bottom: 25px;">
              <h3 style="color: #155724; margin-top: 0; font-size: 18px;">üìã Chi ti·∫øt th√¥ng b√°o:</h3>
              <ul style="color: #155724; font-size: 14px; line-height: 1.6;">
                <li><strong>S·∫£n ph·∫©m:</strong> ${productName}</li>
                <li><strong>Admin x·ª≠ l√Ω:</strong> ${adminName}</li>
                <li><strong>Th·ªùi gian x·ª≠ l√Ω:</strong> ${new Date().toLocaleString('vi-VN')}</li>
                <li><strong>Tr·∫°ng th√°i m·ªõi:</strong> ƒêang b√°n</li>
              </ul>
            </div>
            
            <div style="background-color: #e8f5e8; border: 1px solid #c3e6cb; border-radius: 8px; padding: 20px; margin-bottom: 25px;">
              <h3 style="color: #155724; margin-top: 0; font-size: 18px;">üéâ H√†nh ƒë·ªông ƒë√£ th·ª±c hi·ªán:</h3>
              <p style="color: #155724; font-size: 14px; line-height: 1.6; margin: 0;">
                S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang tr·∫°ng th√°i "ƒêang b√°n" v√† hi·ªÉn th·ªã l·∫°i trong c·ª≠a h√†ng c·ªßa b·∫°n.
              </p>
            </div>
            
            <div style="background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; margin-bottom: 25px;">
              <h3 style="color: #495057; margin-top: 0; font-size: 18px;">üí° H∆∞·ªõng d·∫´n ti·∫øp theo:</h3>
              <ul style="color: #495057; font-size: 14px; line-height: 1.6;">
                <li>S·∫£n ph·∫©m c·ªßa b·∫°n ƒë√£ c√≥ th·ªÉ b√°n l·∫°i b√¨nh th∆∞·ªùng</li>
                <li>Ki·ªÉm tra l·∫°i th√¥ng tin s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c</li>
                <li>ƒê·∫£m b·∫£o tu√¢n th·ªß quy ƒë·ªãnh c·ªßa Reptitist ƒë·ªÉ tr√°nh b·ªã ·∫©n l·∫°i</li>
                <li>N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá admin ho·∫∑c support team</li>
              </ul>
            </div>
            
            <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee;">
              <p style="color: #666; font-size: 12px; margin: 0;">
                Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng Reptitist.<br>
                N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá: <a href="mailto:support@reptitist.com" style="color: #007bff;">support@reptitist.com</a>
              </p>
            </div>
          </div>
        </div>
      `
    };

    const result = await transporter.sendMail(mailOptions);
    console.log('Product unhide email sent successfully:', result.messageId);
    return { success: true, messageId: result.messageId };
  } catch (error) {
    console.error('Error sending product unhide email:', error);
    return { success: false, error: error.message };
  }
};

const testEmailConnection = async () => {
  try {
    await transporter.verify();
    console.log('Email server connection verified successfully');
    return true;
  } catch (error) {
    console.error('Email server connection failed:', error);
    return false;
  }
};

module.exports = {
  transporter,
  sendProductReportNotification,
  sendProductUnhideNotification,
  testEmailConnection
}; 