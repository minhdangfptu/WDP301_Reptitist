import React, { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { useAuth } from '../context/AuthContext';
import "../css/SignUp3.css";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const SignUp3 = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { register } = useAuth();
  
  // Check if user came from SignUp2 with verified email
  const email = location.state?.email || "";
  const isVerified = location.state?.verified || false;
  
  const [formData, setFormData] = useState({
    username: "",
    password: "",
    confirmPassword: "",
  });
  
  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  useEffect(() => {
    console.log("SignUp3 - Email:", email, "Verified:", isVerified); 
    
    if (!email || !isVerified) {
      toast.error("Vui l√≤ng x√°c th·ª±c email tr∆∞·ªõc khi ti·∫øp t·ª•c ƒëƒÉng k√Ω.");
      navigate('/SignUp2');
    }
  }, [email, isVerified, navigate]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    
    // Clear error when user types
    if (errors[name]) {
      setErrors({ ...errors, [name]: null });
    }
    
    // Clear submit error when user makes changes
    if (errors.submit) {
      setErrors({ ...errors, submit: null });
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    // Username validation
    if (!formData.username.trim()) {
      newErrors.username = "T√™n ng∆∞·ªùi d√πng l√† b·∫Øt bu·ªôc";
    } else if (formData.username.trim().length < 3) {
      newErrors.username = "T√™n ng∆∞·ªùi d√πng ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±";
    } else if (formData.username.trim().length > 30) {
      newErrors.username = "T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c qu√° 30 k√Ω t·ª±";
    } else if (!/^[a-zA-Z0-9]+$/.test(formData.username.trim())) {
      newErrors.username = "T√™n ng∆∞·ªùi d√πng ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† s·ªë";
    }
    
    // Password validation
    if (!formData.password) {
      newErrors.password = "M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc";
    } else if (formData.password.length < 8) {
      newErrors.password = "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±";
    } else if (!/(?=.*[A-Z])(?=.*\d)/.test(formData.password)) {
      newErrors.password = "M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t 1 ch·ªØ hoa v√† 1 s·ªë";
    } else if (formData.password.length > 50) {
      newErrors.password = "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±";
    }
    
    // Confirm password validation
    if (!formData.confirmPassword) {
      newErrors.confirmPassword = "Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u";
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }
    
    setIsSubmitting(true);
    setErrors({});
    
    try {
      console.log("Submitting registration with:", {
        username: formData.username.trim(),
        email: email,
        password: formData.password,
      }); // Debug log
      
      // Use the register function from AuthContext
      const result = await register({
        username: formData.username.trim(),
        email: email,
        password: formData.password,
      });
      
      if (result.success) {
        // Registration successful
        toast.success("ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.");
        navigate('/Login');
      } else {
        // Registration failed
        if (result.message.includes('Username already exists')) {
          setErrors({ username: "T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i" });
        } else if (result.message.includes('Email already exists')) {
          setErrors({ submit: "Email ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω" });
        } else if (result.message.includes('Invalid password')) {
          setErrors({ password: "M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá" });
        } else {
          setErrors({ submit: result.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i." });
        }
        toast.error(result.message || "ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } catch (error) {
      console.error("Error during registration:", error);
      setErrors({ 
        submit: error.message || "L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i." 
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const togglePasswordVisibility = (field) => {
    if (field === 'password') {
      setShowPassword(!showPassword);
    } else if (field === 'confirmPassword') {
      setShowConfirmPassword(!showConfirmPassword);
    }
  };

  // Show loading while checking verification status
  if (!email || !isVerified) {
    return (
      <div style={{
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        height: '100vh',
        fontSize: '18px',
        color: '#666'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div>‚è≥ ƒêang ki·ªÉm tra x√°c th·ª±c...</div>
          <div style={{ fontSize: '14px', marginTop: '10px' }}>
            Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="signup3-body">
      <ToastContainer
        position="top-right"
        autoClose={4000}
        hideProgressBar={false}
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
      <div className="signup3-container">
        <div className="signup3-content">
          <div className="signup3-logo">
            <img src="/logo1.png" alt="Reptisist Logo" />
          </div>
          
          <h1 className="signup3-headline">Ho√†n t·∫•t ƒëƒÉng k√Ω</h1>
          
          <p className="signup3-subheadline">
            Vui l√≤ng t·∫°o t√™n ng∆∞·ªùi d√πng v√† m·∫≠t kh·∫©u ƒë·ªÉ ho√†n t·∫•t vi·ªác t·∫°o t√†i kho·∫£n cho email: <strong>{email}</strong>
          </p>
          
          <form className="signup3-form" onSubmit={handleSubmit}>
            <div className="signup3-input-group">
              <label htmlFor="email">Email ƒë√£ x√°c th·ª±c</label>
              <input 
                type="email" 
                id="email"
                value={email}
                disabled
                className="signup3-input disabled"
                style={{ backgroundColor: '#e8f5e8', color: '#0a5a0a' }}
              />
              <div style={{ fontSize: '12px', color: '#28a745', marginTop: '5px' }}>
                ‚úì Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
              </div>
            </div>
            
            <div className="signup3-input-group">
              <label htmlFor="username">T√™n ng∆∞·ªùi d√πng *</label>
              <input 
                type="text" 
                id="username"
                name="username"
                value={formData.username}
                onChange={handleChange}
                className={`signup3-input ${errors.username ? 'error' : ''}`}
                placeholder="Nh·∫≠p t√™n ng∆∞·ªùi d√πng (3-30 k√Ω t·ª±, ch·ªâ ch·ªØ v√† s·ªë)"
                disabled={isSubmitting}
              />
              {errors.username && <div className="error-message">{errors.username}</div>}
            </div>
            
            <div className="signup3-input-group">
              <label htmlFor="password">M·∫≠t kh·∫©u *</label>
              <div style={{ position: 'relative' }}>
                <input 
                  type={showPassword ? "text" : "password"}
                  id="password"
                  name="password"
                  value={formData.password}
                  onChange={handleChange}
                  className={`signup3-input ${errors.password ? 'error' : ''}`}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u (√≠t nh·∫•t 8 k√Ω t·ª±, c√≥ ch·ªØ hoa v√† s·ªë)"
                  disabled={isSubmitting}
                />
                <button
                  type="button"
                  onClick={() => togglePasswordVisibility('password')}
                  style={{
                    position: 'absolute',
                    right: '15px',
                    top: '50%',
                    transform: 'translateY(-50%)',
                    background: 'none',
                    border: 'none',
                    cursor: 'pointer',
                    color: '#666',
                    fontSize: '16px'
                  }}
                  disabled={isSubmitting}
                >
                  {showPassword ? 'üëÅÔ∏è‚Äçüó®Ô∏è' : 'üëÅÔ∏è'}
                </button>
              </div>
              {errors.password && <div className="error-message">{errors.password}</div>}
            </div>
            
            <div className="signup3-input-group">
              <label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u *</label>
              <div style={{ position: 'relative' }}>
                <input 
                  type={showConfirmPassword ? "text" : "password"}
                  id="confirmPassword"
                  name="confirmPassword"
                  value={formData.confirmPassword}
                  onChange={handleChange}
                  className={`signup3-input ${errors.confirmPassword ? 'error' : ''}`}
                  placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
                  disabled={isSubmitting}
                />
                <button
                  type="button"
                  onClick={() => togglePasswordVisibility('confirmPassword')}
                  style={{
                    position: 'absolute',
                    right: '15px',
                    top: '50%',
                    transform: 'translateY(-50%)',
                    background: 'none',
                    border: 'none',
                    cursor: 'pointer',
                    color: '#666',
                    fontSize: '16px'
                  }}
                  disabled={isSubmitting}
                >
                  {showConfirmPassword ? 'üëÅÔ∏è‚Äçüó®Ô∏è' : 'üëÅÔ∏è'}
                </button>
              </div>
              {errors.confirmPassword && (
                <div className="error-message">{errors.confirmPassword}</div>
              )}
            </div>
            
            {errors.submit && (
              <div className="error-message submit-error" style={{ 
                backgroundColor: '#f8d7da', 
                border: '1px solid #f5c6cb', 
                padding: '10px',
                borderRadius: '5px'
              }}>
                {errors.submit}
              </div>
            )}
            
            <button 
              type="submit" 
              className="signup3-button"
              disabled={isSubmitting}
            >
              {isSubmitting ? "‚è≥ ƒêang t·∫°o t√†i kho·∫£n..." : "Ho√†n t·∫•t ƒëƒÉng k√Ω"}
            </button>
          </form>
          
          <div className="signup3-terms">
            B·∫±ng c√°ch ƒëƒÉng k√Ω, b·∫°n ƒë·ªìng √Ω v·ªõi{" "}
            <a href="#" style={{ color: '#0fa958' }}>ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng</a> v√†{" "}
            <a href="#" style={{ color: '#0fa958' }}>Ch√≠nh s√°ch b·∫£o m·∫≠t</a> c·ªßa ch√∫ng t√¥i.
          </div>
        </div>
        
        <div className="signup3-image"></div>
      </div>
    </div>
  );
};

export default SignUp3;